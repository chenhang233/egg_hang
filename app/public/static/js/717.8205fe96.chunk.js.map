{"version":3,"file":"static/js/717.8205fe96.chunk.js","mappings":"6SAoCAA,EAAAA,EAAY,CACVC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,IAEF,Q,UC/CA,EAAuB,sB,SCgFvB,EA3EgB,WACd,IAAMC,GAASC,EAAAA,EAAAA,QAAuB,MAuEtC,OAtEAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAOG,SAAWH,EAAOG,QAAQC,aAAe,EAAG,CAgBrD,IAfA,IAAIC,EAAsB,GACtBC,EAAM,IAAIC,KAAK,KAAM,EAAG,GAExBC,EAAwB,IAAhBC,KAAKC,SACXC,EAAa,WAGjB,OAFAL,EAAM,IAAIC,MAAMD,EAHL,OAIXE,EAAQA,EAAwB,GAAhBC,KAAKC,SAAgB,GAC9B,CACLE,KAAMN,EAAIO,WACVL,MAAO,CACL,CAACF,EAAIQ,cAAeR,EAAIS,WAAa,EAAGT,EAAIU,WAAWC,KAAK,KAC5DR,KAAKS,MAAMV,IAGhB,EACQW,EAAI,EAAGA,EAAI,IAAMA,IACxBd,EAAKe,KAAKT,KAGZ,IAAMU,EAAYhC,EAAAA,KAAaW,EAAOG,aAASmB,EAAW,CAAC,GAE3DD,EAAUE,UAAU,CAClBC,MAAO,CACLC,KAAM,sBAERC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,WAAW,IAGfC,MAAO,CACLC,KAAM,OACNC,UAAW,CACTC,MAAM,IAGVC,MAAO,CACLH,KAAM,QACNI,YAAa,CAAC,EAAG,QACjBH,UAAW,CACTC,MAAM,IAGVG,OAAQ,CACN,CACExB,KAAM,qBACNmB,KAAM,OACNM,YAAY,EACZhC,KAAMA,MAIZiC,aAAY,WACV,IAAK,IAAInB,EAAI,EAAGA,EAAI,EAAGA,IACrBd,EAAKkC,QACLlC,EAAKe,KAAKT,KAEZU,EAAUE,UAAU,CAClBa,OAAQ,CACN,CACE/B,KAAMA,KAIb,GAAE,IACJ,CACF,GAAE,KACI,gBAAKmC,UAAWC,IAAWC,GAAcC,IAAK3C,GACtD,C","sources":["echart.ts","webpack://egg_frontend/./src/pages/Index/pages/Analyse/index.module.scss?63f3","pages/Index/pages/Analyse/index.tsx"],"sourcesContent":["import * as echarts from 'echarts/core'\r\nimport {\r\n  BarChart,\r\n  // 系列类型的定义后缀都为 SeriesOption\r\n  BarSeriesOption,\r\n  LineChart,\r\n  LineSeriesOption,\r\n} from 'echarts/charts'\r\nimport {\r\n  TitleComponent,\r\n  // 组件类型的定义后缀都为 ComponentOption\r\n  TitleComponentOption,\r\n  TooltipComponent,\r\n  TooltipComponentOption,\r\n  GridComponent,\r\n  GridComponentOption,\r\n  // 数据集组件\r\n  DatasetComponent,\r\n  DatasetComponentOption,\r\n  // 内置数据转换器组件 (filter, sort)\r\n  TransformComponent,\r\n} from 'echarts/components'\r\nimport { LabelLayout, UniversalTransition } from 'echarts/features'\r\nimport { CanvasRenderer } from 'echarts/renderers'\r\n\r\n// 通过 ComposeOption 来组合出一个只有必须组件和图表的 Option 类型\r\nexport type ECOption = echarts.ComposeOption<\r\n  | BarSeriesOption\r\n  | LineSeriesOption\r\n  | TitleComponentOption\r\n  | TooltipComponentOption\r\n  | GridComponentOption\r\n  | DatasetComponentOption\r\n>\r\n\r\n// 注册必须的组件\r\necharts.use([\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  TransformComponent,\r\n  BarChart,\r\n  LineChart,\r\n  LabelLayout,\r\n  UniversalTransition,\r\n  CanvasRenderer,\r\n])\r\nexport default echarts\r\n// const option: ECOption = {\r\n//   // ...\r\n// };\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Analyse_root__paKmb\"};","import classNames from 'classnames'\r\nimport echarts from '../../../../echart'\r\nimport { useEffect, useRef } from 'react'\r\nimport styles from './index.module.scss'\r\n\r\ntype MyLineEcharts = { name: string; value: (string | number)[] }[]\r\nconst Analyse = () => {\r\n  const divRef = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (divRef.current && divRef.current.offsetHeight > 0) {\r\n      let data: MyLineEcharts = []\r\n      let now = new Date(1997, 9, 3)\r\n      let oneDay = 24 * 3600 * 1000\r\n      let value = Math.random() * 1000\r\n      const randomData = () => {\r\n        now = new Date(+now + oneDay)\r\n        value = value + Math.random() * 21 - 10\r\n        return {\r\n          name: now.toString(),\r\n          value: [\r\n            [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'),\r\n            Math.round(value),\r\n          ],\r\n        }\r\n      }\r\n      for (var i = 0; i < 1000; i++) {\r\n        data.push(randomData())\r\n      }\r\n\r\n      const myEcharts = echarts.init(divRef.current, undefined, {})\r\n\r\n      myEcharts.setOption({\r\n        title: {\r\n          text: '访问量',\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            animation: true,\r\n          },\r\n        },\r\n        xAxis: {\r\n          type: 'time',\r\n          splitLine: {\r\n            show: false,\r\n          },\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          boundaryGap: [0, '100%'],\r\n          splitLine: {\r\n            show: false,\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: '假数据',\r\n            type: 'line',\r\n            showSymbol: false,\r\n            data: data,\r\n          },\r\n        ],\r\n      })\r\n      setInterval(function () {\r\n        for (var i = 0; i < 5; i++) {\r\n          data.shift()\r\n          data.push(randomData())\r\n        }\r\n        myEcharts.setOption({\r\n          series: [\r\n            {\r\n              data: data,\r\n            },\r\n          ],\r\n        })\r\n      }, 200)\r\n    }\r\n  }, [])\r\n  return <div className={classNames(styles.root)} ref={divRef}></div>\r\n}\r\n\r\nexport default Analyse\r\n"],"names":["echarts","TitleComponent","TooltipComponent","GridComponent","DatasetComponent","TransformComponent","BarChart","LineChart","LabelLayout","UniversalTransition","CanvasRenderer","divRef","useRef","useEffect","current","offsetHeight","data","now","Date","value","Math","random","randomData","name","toString","getFullYear","getMonth","getDate","join","round","i","push","myEcharts","undefined","setOption","title","text","tooltip","trigger","axisPointer","animation","xAxis","type","splitLine","show","yAxis","boundaryGap","series","showSymbol","setInterval","shift","className","classNames","styles","ref"],"sourceRoot":""}